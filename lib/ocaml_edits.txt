In hivex.h
  extern size_t  allocate_block (hive_h *h, size_t seg_len, const char id[2]);
  extern void calc_hash (const char *type, const char *name, void *ret);
  extern size_t hivex_free_bytes(hive_h *h);
  extern size_t hivex_used_bytes(hive_h *h);
  extern int hivex_defragment(hive_h *old, const char* name);

In hivex.syms
          hivex_used_bytes;
          hivex_free_bytes;
          hivex_defragment;

In python/hivex/__init__.py

    def used_bytes (self):
        """return the number of used bytes in hive"""
        return libhivexmod.used_bytes (self._o)

    def free_bytes (self):
        """return the number of free bytes in hive"""
        return libhivexmod.free_bytes (self._o)

    def defragment (self, name):
        """defragments the hive, creating a new hive with <name>"""
        return libhivexmod.defragment (self._o, name)


In hivex-py.c

      { (char *) "used_bytes", py_hivex_used_bytes, METH_VARARGS, NULL },
      { (char *) "free_bytes", py_hivex_free_bytes, METH_VARARGS, NULL },
      { (char *) "defragment", py_hivex_defragment, METH_VARARGS, NULL },

static PyObject *
py_hivex_defragment (PyObject *self, PyObject *args)
{
  PyObject *py_r;
  hive_h *h;
  PyObject *py_h;
  char *name;
  int r;

  if (!PyArg_ParseTuple (args, (char *) "Os:hivex_defragment", &py_h, &name))
    return NULL;
  h = get_handle (py_h);
  r = hivex_defragment (h, name);
  if (r != 0) {
    PyErr_SetString (PyExc_RuntimeError,
                     strerror (errno));
    return NULL;
  }
  py_r = PyLong_FromLongLong (r);
  return py_r;
}

static PyObject *
py_hivex_free_bytes (PyObject *self, PyObject *args)
{
  PyObject *py_r;
  size_t r;
  hive_h *h;
  PyObject *py_h;

  if (!PyArg_ParseTuple (args, (char *) "O:hivex_free_bytes", &py_h))
    return NULL;
  h = get_handle (py_h);
  r = hivex_free_bytes (h);
  if (r == -1) {
    PyErr_SetString (PyExc_RuntimeError,
                     strerror (errno));
    return NULL;
  }

  py_r = PyLong_FromLongLong (r);
  return py_r;
}

static PyObject *
py_hivex_used_bytes (PyObject *self, PyObject *args)
{
  PyObject *py_r;
  size_t r;
  hive_h *h;
  PyObject *py_h;

  if (!PyArg_ParseTuple (args, (char *) "O:hivex_used_bytes", &py_h))
    return NULL;
  h = get_handle (py_h);
  r = hivex_used_bytes (h);
  if (r == -1) {
    PyErr_SetString (PyExc_RuntimeError,
                     strerror (errno));
    return NULL;
  }

  py_r = PyLong_FromLongLong (r);
  return py_r;
}
